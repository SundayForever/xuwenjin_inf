package cn.com.alo7.inf.repository;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import cn.com.alo7.inf.entity.Video;

@Repository
public class VideoRepository {
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Transactional(readOnly = true)
	public Video getVideoByVideoId(String videoId) throws Exception{
		StringBuffer sql = new StringBuffer();
		sql.append(" select ");
		sql.append(" 	sv.pk_id as id, ");
		sql.append(" 	sv.is_not_ground as status, ");
		sql.append(" 	sv.video_url as videoUrl, ");
		sql.append("    sv.voice_track_url as voiceTrackUrl, ");
		sql.append(" 	sv.background_track_url as backgroundTrackUrl, ");
		sql.append(" 	sv.subtitle_url as subtitleUrl, ");
		sql.append(" 	sv.is_not_show as isDisplay ");
		sql.append("  from sys_video sv ");
		sql.append(" where sv.delete_flag = '0' ");
		sql.append(" and sv.pk_id =?");
		
		Video video = (Video) jdbcTemplate.queryForObject(sql.toString(),new Object[]{videoId}, new RowMapper<Video>(){  
			  
            @Override  
            public Video mapRow(ResultSet rs,int rowNum)throws SQLException {  
            	Video video  = new Video();  
            	video.setId(rs.getString("id"));
				video.setStatus(rs.getString("status"));
				video.setVideoUrl(rs.getString("videoUrl"));
				video.setVoiceTrackUrl(rs.getString("voiceTrackUrl"));
				video.setBackgroundTrackUrl(rs.getString("backgroundTrackUrl"));
				video.setSubtitleUrl(rs.getString("subtitleUrl"));
				video.setIsDisplay(rs.getString("isDisplay"));
                return video;  
            }
		});
		
		return video;
	}
}
